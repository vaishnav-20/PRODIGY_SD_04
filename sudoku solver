import tkinter as tk
from tkinter import messagebox
import threading

# Global variable to hold entry widgets
entries = []

def create_gui():
    global entries
    root = tk.Tk()
    root.title("Sudoku Solver")

    for row in range(9):
        current_row = []
        for col in range(9):
            entry = tk.Entry(root, width=5, font=('Arial', 18), justify='center')
            entry.grid(row=row, column=col, padx=5, pady=5)
            current_row.append(entry)
        entries.append(current_row)

    solve_button = tk.Button(root, text="Solve", command=solve)
    solve_button.grid(row=10, column=0, columnspan=4, padx=5, pady=5)

    clear_button = tk.Button(root, text="Clear", command=clear_board)
    clear_button.grid(row=10, column=4, columnspan=4, padx=5, pady=5)

    root.mainloop()

def get_board_from_gui():
    board = []
    for row in range(9):
        current_row = []
        for col in range(9):
            val = entries[row][col].get()
            current_row.append(int(val) if val.isdigit() and val != '' else 0)
        board.append(current_row)
    print("Board from GUI:", board)  # Debugging line
    return board

def clear_board():
    global entries
    print("Clear button clicked")  # Debugging statement
    for row in range(9):
        for col in range(9):
            entries[row][ col].delete(0, 'end')

def solve_sudoku(board):
    # ... existing code ...
    return False  # Add this line to test the "No Solution" case

def solve_sudoku_thread(board):
    if solve_sudoku(board):
        display_solution(board)
    else:
        print("No solution found.")  # Debugging line
        messagebox.showinfo("No Solution", "No solution exists for the given puzzle.")

def solve():
    board = get_board_from_gui()
    print("Current board state before solving:", board)  # Debugging line
    thread = threading.Thread(target=solve_sudoku_thread, args=(board,))
    thread.start()
    thread.join(timeout=10)  # Wait for 10 seconds
    if thread.is_alive():
        print("Puzzle is too difficult.")  # Debugging line
        messagebox.showinfo("Too Difficult", "The puzzle is too difficult to solve.")

def display_solution(board):
    for row in range(9):
        for col in range(9):
            entries[row][col].delete(0, 'end')
            entries[row][col].insert(0, str(board[row][col]))

create_gui()
